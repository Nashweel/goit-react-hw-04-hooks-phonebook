{"version":3,"sources":["components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","hooks/useLocalStorage.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css"],"names":["ContactForm","onAdd","useState","name","setName","phone","setPhone","nameInputId","shortid","generate","numberInputId","handleChange","evt","target","value","console","warn","resetForm","onSubmit","preventDefault","className","s","id","type","pattern","title","placeholder","onChange","FormInput","FormButton","ContactListItem","onRemove","ContactItem","onClick","ContactsList","contacts","length","ContactList","map","number","Filter","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","contact","find","alert","trim","prevContacts","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.a2fbf456.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport shortid from \"shortid\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactForm.module.css\";\n\nexport default function ContactForm({ onAdd }) {\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"phone\":\n        setPhone(value);\n        break;\n\n      default:\n        console.warn(`Тип поля name - ${name} не обрабатывается`);\n    }\n  };\n\n  const handleFormSubmit = (evt) => {\n    evt.preventDefault();\n\n    onAdd(name, phone);\n\n    if ((!name && phone) || (name && !phone)) resetForm();\n  };\n  const resetForm = () => {\n    setName(\"\");\n    setPhone(\"\");\n  };\n  return (\n    <form onSubmit={handleFormSubmit} className={s.ContactForm}>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        placeholder=\"Enter name\"\n        value={name}\n        onChange={handleChange}\n        className={s.FormInput}\n      />\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"phone\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        placeholder=\"Enter phone number\"\n        value={phone}\n        onChange={handleChange}\n        className={s.FormInput}\n      />\n      <button type=\"submit\" className={s.FormButton}>\n        Add Contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport s from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst ContactListItem = ({ id, name, phone, onRemove }) => {\n  return (\n    <li className={s.ContactItem}>\n      {name}: {phone} <button onClick={() => onRemove(id)}>delete</button>\n    </li>\n  );\n};\n\nconst ContactsList = ({ contacts, onRemove }) => {\n  if (contacts.length === 0) return null;\n  return (\n    <ul className={s.ContactList}>\n      {contacts.map(({ id, name, phone }) => (\n        <ContactListItem\n          name={name}\n          number={phone}\n          key={id}\n          onRemove={() => onRemove(id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <input\n      type=\"text\"\n      name=\"filter\"\n      value={value}\n      onChange={onChange}\n      placeholder=\"Enter name for search\"\n    ></input>\n  );\n};\n\nFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState } from \"react\";\nimport shortid from \"shortid\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport ContactForm from \"./components/ContactForm\";\nimport ContactsList from \"./components/ContactList\";\nimport Filter from \"./components/Filter\";\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage(\"contacts\", []);\n  const [filter, setFilter] = useState(\"\");\n\n  const handleAddContact = (name, phone) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      phone,\n    };\n\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    if (contacts.find((contact) => contact.number === phone)) {\n      alert(`Number ${phone} is already in contacts`);\n      return;\n    }\n\n    if ((!name || name.trim() === \"\") && (!phone || phone.trim() === \"\")) {\n      alert('Fill in the fields \"Name\" and \"Number\"');\n      return;\n    }\n\n    if (!name || name.trim() === \"\") {\n      alert('Field \"Name\" is empty');\n      return;\n    }\n\n    if (!phone || phone.trim() === \"\") {\n      alert('Field \"Number\" is empty');\n      return;\n    }\n    setContacts((prevContacts) => [contact, ...prevContacts]);\n  };\n  const handleRemoveContact = (id) => {\n    setContacts(() => contacts.filter((contact) => contact.id !== id));\n  };\n\n  const handleFilterChange = (evt) => setFilter(evt.target.value);\n\n  const getVisibleContacts = () => {\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm onAdd={handleAddContact} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} onChange={handleFilterChange} />\n      {contacts.length === 0 ? (\n        <p>There are no contacts</p>\n      ) : (\n        <ContactsList\n          contacts={getVisibleContacts()}\n          onRemove={handleRemoveContact}\n        />\n      )}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\n\nexport default function useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(\n    () => JSON.parse(window.localStorage.getItem(key)) ?? defaultValue\n  );\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__1zvAA\",\"FormInput\":\"ContactForm_FormInput__2aqf2\",\"FormButton\":\"ContactForm_FormButton__28giq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__4TvGi\",\"ContactItem\":\"ContactList_ContactItem__2TMaP\"};"],"sourceRoot":""}